generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users table (handled by Better Auth, but we'll define it for reference)
model User {
  id               String            @id @default(uuid())
  email            String            @unique
  name             String?
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  sessions         Session[]
  accounts         Account[]
  // Relations
  campaigns        Campaign[]
  leads            Lead[]
  linkedinAccounts LinkedinAccount[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// Campaigns table
model Campaign {
  id                String   @id @default(cuid())
  name              String   @db.VarChar(255)
  description       String?
  status            String   @default("draft") @db.VarChar(50) // draft, active, paused, completed
  totalLeads        Int      @default(0) @map("total_leads")
  successfulLeads   Int      @default(0) @map("successful_leads")
  responseRate      Decimal  @default(0.00) @map("response_rate") @db.Decimal(5, 2)
  requestMessage    String?  @map("request_message")
  connectionMessage String?  @map("connection_message")
  followupMessages  Json     @default("[]") @map("followup_messages")
  settings          Json     @default("{\"autopilot\": false, \"personalization\": true, \"selectedAccounts\": []}")
  userId            String   @map("user_id")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  leads Lead[]

  @@map("campaigns")
}

// Leads table
model Lead {
  id                 String    @id @default(cuid())
  name               String    @db.VarChar(255)
  email              String?   @db.VarChar(255)
  title              String?
  company            String?   @db.VarChar(255)
  linkedinUrl        String?   @map("linkedin_url")
  profileImage       String?   @map("profile_image")
  status             String    @default("pending") @db.VarChar(50) // pending, contacted, responded, converted, blocked
  activity           Int       @default(0) // 1-5 scale
  lastContactDate    DateTime? @map("last_contact_date")
  interactionHistory Json      @default("[]") @map("interaction_history")
  campaignId         String    @map("campaign_id")
  userId             String    @map("user_id")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  // Relations
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("leads")
}

// LinkedIn Accounts table
model LinkedinAccount {
  id            String   @id @default(cuid())
  name          String   @db.VarChar(255)
  email         String   @db.VarChar(255)
  status        String   @default("connected") @db.VarChar(50) // connected, disconnected, error
  requestsSent  Int      @default(0) @map("requests_sent")
  requestsLimit Int      @default(30) @map("requests_limit")
  progress      Decimal  @default(0.00) @db.Decimal(5, 2)
  userId        String   @map("user_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("linkedin_accounts")
}
